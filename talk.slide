
Writing frictionless command-line interfaces in Go
23 May 2019
Tags: go, golang

Jaime Pillora
Software Engineer
https://jpillora.com
dev@jpillora.com

https://github.com/jpillora/opts
Find out more here

: Test note

#==============================================

*  Go is powerful, simple and predictable and our command-line interfaces should be the same

: Go is awesome. I’ve spent a lot of time writing command-line interfaces. When I started writing CLIs, the Go ecosystem didn’t have any CLI packages that met my needs. They were either too complicated, too strange or had too much boilerplate.
: So, I decided to write my own
: Let’s start with the canonical Go example, a webserver

#==============================================

* Hello web server

main.go

.code step1/main.go /^func main/,/^}/

server/server.go

.code step1/server/server.go /package/
.code step1/server/server.go /^type Server/
.code step1/server/server.go /^func New/,/^}/


: So, let’s make a web server
: By definition main packages are not reusable, and so I like to keep my main packages as small as possible, and split my logic into other sub packages.
: Here we can see our main function
: And we're instantiating our Server “class” and then we're running it.

#==============================================

* Config required

main.go

.code step2/main.go /^func main/,/^}/

server/server.go

.code step2/server/server.go /^type Config/,/^}/
.code step2/server/server.go /^func New/,/^}/

: Nearly every program we write has configuration.
: We might be able to get by with hard-coded values for a while, but eventually, we need some form of external configuration.
: So we expose a Config struct and make it a parameter of New.

#==============================================

* An interface via the command-line

main.go

.code step3/main.go /^func main/,/^}/

server/server.go

.code step3/server/server.go /^type Config/,/^}/

: At this point, we could use the standard library “flag” package, like this, and set the address of each field.
: But, we can see we’re repeating ourselves by describing our config struct again.
: Let’s try this again, except using opts.

#==============================================

* Enter opts

main.go

.code step4/main.go /^func main/,/^}/

server/server.go

.code step4/server/server.go /^type Config/,/^}/

: This code implements the same logic as the last slide, though we can see that all the config addressing is gone, and our CLI “logic” now lives in Config.
: And there’s a sneaky env=PORT in there as well. This tells opts to use the PORT variable when the flag isn’t defined. If it’s undefined too then it will use the default.

#==============================================

* Improved help text

Before

.code step3/help.txt

After

.code step4/help.txt

: Here we can see similar help outputs
: And that opts is neater, though more importantly, you cannot make any changes at all to the package flag output, whereas opts is completely customisable.

#==============================================

* Why opts?

- Promotes better code separation
- Automatically generated and highly customisable help text
- Default values by intitialising the struct
- Default values from a JSON config file
- Default values from the environment
- Group sets of flags in the help text
- Sub-commands by providing child Opts or nesting structs
- Infers program name command names from struct or package name
- Define custom flags types via opts.Setter or flag.Value
- Built-in shell auto-completion
- Easy to use with minimal boilerplate

: So why use opts? Well here's a few reasons.
: You might have realised that other packages out there have similar feature lists.
: The biggest difference is the last point, opts allows you uplift your existing structs into commands and subcommands with minimal effort

#==============================================

* Subcommands and shell-completions

Demo

.image vscode.png

: Speaking of subcommands, lets get into a demo
: VSCode -> golang-syd/
: TLS flags -> subcommands "cert gen/inspect"